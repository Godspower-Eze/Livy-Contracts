{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/apps/SuperTokenV1Library.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport {\n    ISuperfluid,\n    ISuperToken\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"../interfaces/agreements/IConstantFlowAgreementV1.sol\";\n\nimport {\n    IInstantDistributionAgreementV1\n} from \"../interfaces/agreements/IInstantDistributionAgreementV1.sol\";\n\n/**\n * @title Library for Token Centric Interface\n * @author Superfluid\n * @dev Set `using for ISuperToken` in including file, and call any of these functions on an instance\n * of ISuperToken\n */\nlibrary SuperTokenV1Library {\n\n    /** CFA BASE CRUD ************************************* */\n\n    /**\n     * @dev Create flow without userData\n     * @param token The token used in flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     */\n    function createFlow(ISuperToken token, address receiver, int96 flowRate)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlow,\n                (token, receiver, flowRate, new bytes(0))\n            ),\n            new bytes(0) // userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Create flow with userData\n     * @param token The token used in flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param userData The userdata passed along with call\n     */\n    function createFlow(ISuperToken token, address receiver, int96 flowRate, bytes memory userData)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlow,\n                (token, receiver, flowRate, new bytes(0))\n            ),\n            userData // userData\n        );\n        return true;\n    }\n\n\n    /**\n     * @dev Update flow without userData\n     * @param token The token used in flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     */\n    function updateFlow(ISuperToken token, address receiver, int96 flowRate)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlow,\n                (token, receiver, flowRate, new bytes(0))\n            ),\n            new bytes(0) // userData\n        );\n        return true;\n    }\n\n\n    /**\n     * @dev Update flow with userData\n     * @param token The token used in flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param userData The userdata passed along with call\n     */\n    function updateFlow(ISuperToken token, address receiver, int96 flowRate, bytes memory userData)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlow,\n                (token, receiver, flowRate, new bytes(0))\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Delete flow without userData\n     * @param token The token used in flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     */\n    function deleteFlow(ISuperToken token, address sender, address receiver)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlow,\n                (token, sender, receiver, new bytes(0))\n            ),\n            new bytes(0) // userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Delete flow with userData\n     * @param token The token used in flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param userData The userdata passed along with call\n     */\n    function deleteFlow(ISuperToken token, address sender, address receiver, bytes memory userData)\n        internal returns (bool)\n    {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlow,\n                (token, sender, receiver, new bytes(0))\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /** CFA ACL ************************************* */\n\n    /**\n     * @dev Update permissions for flow operator\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     * @param allowCreate creation permissions\n     * @param allowCreate update permissions\n     * @param allowCreate deletion permissions\n     * @param flowRateAllowance The allowance provided to flowOperator\n     */\n    function setFlowPermissions(\n        ISuperToken token,\n        address flowOperator,\n        bool allowCreate,\n        bool allowUpdate,\n        bool allowDelete,\n        int96 flowRateAllowance\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        uint8 permissionsBitmask = (allowCreate ? 1 : 0)\n            | (allowUpdate ? 1 : 0) << 1\n            | (allowDelete ? 1 : 0) << 2;\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlowOperatorPermissions,\n                (token, flowOperator, permissionsBitmask, flowRateAllowance, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Update permissions for flow operator - give operator max permissions\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     */\n    function setMaxFlowPermissions(\n        ISuperToken token,\n        address flowOperator\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.authorizeFlowOperatorWithFullControl,\n                (token, flowOperator, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Update permissions for flow operator - revoke all permission\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     */\n    function revokeFlowPermissions(\n        ISuperToken token,\n        address flowOperator\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.revokeFlowOperatorWithFullControl,\n                (token, flowOperator, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Update permissions for flow operator in callback\n     * @notice allowing userData to be a parameter here triggered stack to deep error\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     * @param allowCreate creation permissions\n     * @param allowCreate update permissions\n     * @param allowCreate deletion permissions\n     * @param flowRateAllowance The allowance provided to flowOperator\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function setFlowPermissionsWithCtx(\n        ISuperToken token,\n        address flowOperator,\n        bool allowCreate,\n        bool allowUpdate,\n        bool allowDelete,\n        int96 flowRateAllowance,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        uint8 permissionsBitmask = (allowCreate ? 1 : 0)\n            | (allowUpdate ? 1 : 0) << 1\n            | (allowDelete ? 1 : 0) << 2;\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlowOperatorPermissions,\n                (\n                    token,\n                    flowOperator,\n                    permissionsBitmask,\n                    flowRateAllowance,\n                    new bytes(0)\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Update permissions for flow operator - give operator max permissions\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function setMaxFlowPermissionsWithCtx(\n        ISuperToken token,\n        address flowOperator,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.authorizeFlowOperatorWithFullControl,\n                (\n                    token,\n                    flowOperator,\n                    new bytes(0)\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n    * @dev Update permissions for flow operator - revoke all permission\n     * @param token The token used in flow\n     * @param flowOperator The address given flow permissions\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowPermissionsWithCtx(\n        ISuperToken token,\n        address flowOperator,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.revokeFlowOperatorWithFullControl,\n                (token, flowOperator, new bytes(0))\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n\n    /**\n     * @dev Creates flow as an operator without userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     */\n    function createFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlowByOperator,\n                (token, sender, receiver, flowRate, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates flow as an operator with userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param userData The user provided data\n     */\n    function createFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlowByOperator,\n                (token, sender, receiver, flowRate, new bytes(0))\n            ),\n            userData\n        );\n        return true;\n    }\n\n\n    /**\n     * @dev Updates flow as an operator without userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     */\n    function updateFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlowByOperator,\n                (token, sender, receiver, flowRate, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates flow as an operator with userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param userData The user provided data\n     */\n    function updateFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlowByOperator,\n                (token, sender, receiver, flowRate, new bytes(0))\n            ),\n            userData\n        );\n        return true;\n    }\n\n     /**\n     * @dev Deletes flow as an operator without userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     */\n    function deleteFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlowByOperator,\n                (token, sender, receiver, new bytes(0))\n            ),\n            new bytes(0)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Deletes flow as an operator with userData\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param userData The user provided data\n     */\n    function deleteFlowFrom(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        host.callAgreement(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlowByOperator,\n                (token, sender, receiver, new bytes(0))\n            ),\n            userData\n        );\n        return true;\n    }\n\n\n    /** CFA With CTX FUNCTIONS ************************************* */\n\n    /**\n     * @dev Create flow with context and userData\n     * @param token The token to flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function createFlowWithCtx(\n        ISuperToken token,\n        address receiver,\n        int96 flowRate,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlow,\n                (\n                    token,\n                    receiver,\n                    flowRate,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Create flow by operator with context\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function createFlowFromWithCtx(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.createFlowByOperator,\n                (\n                    token,\n                    sender,\n                    receiver,\n                    flowRate,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Update flow with context\n     * @param token The token to flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowWithCtx(\n        ISuperToken token,\n        address receiver,\n        int96 flowRate,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlow,\n                (\n                    token,\n                    receiver,\n                    flowRate,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Update flow by operator with context\n     * @param token The token to flow\n     * @param sender The receiver of the flow\n     * @param receiver The receiver of the flow\n     * @param flowRate The desired flowRate\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowFromWithCtx(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.updateFlowByOperator,\n                (\n                    token,\n                    sender,\n                    receiver,\n                    flowRate,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Delete flow with context\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function deleteFlowWithCtx(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlow,\n                (\n                    token,\n                    sender,\n                    receiver,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Delete flow by operator with context\n     * @param token The token to flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function deleteFlowFromWithCtx(\n        ISuperToken token,\n        address sender,\n        address receiver,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IConstantFlowAgreementV1 cfa) = _getAndCacheHostAndCFA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            cfa,\n            abi.encodeCall(\n                cfa.deleteFlowByOperator,\n                (\n                    token,\n                    sender,\n                    receiver,\n                    new bytes(0) // placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /** CFA VIEW FUNCTIONS ************************************* */\n\n    /**\n     * @dev get flow rate between two accounts for given token\n     * @param token The token used in flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @return flowRate The flow rate\n     */\n    function getFlowRate(ISuperToken token, address sender, address receiver)\n        internal view returns(int96 flowRate)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        (, flowRate, , ) = cfa.getFlow(token, sender, receiver);\n    }\n\n    /**\n     * @dev get flow info between two accounts for given token\n     * @param token The token used in flow\n     * @param sender The sender of the flow\n     * @param receiver The receiver of the flow\n     * @return lastUpdated Timestamp of flow creation or last flowrate change\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlowInfo(ISuperToken token, address sender, address receiver)\n        internal view\n        returns(uint256 lastUpdated, int96 flowRate, uint256 deposit, uint256 owedDeposit)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        (lastUpdated, flowRate, deposit, owedDeposit) = cfa.getFlow(token, sender, receiver);\n    }\n\n    /**\n     * @dev get net flow rate for given account for given token\n     * @param token Super token address\n     * @param account Account to query\n     * @return flowRate The net flow rate of the account\n     */\n    function getNetFlowRate(ISuperToken token, address account)\n        internal view returns (int96 flowRate)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        return cfa.getNetFlow(token, account);\n    }\n\n    /**\n     * @dev get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account to query\n     * @return lastUpdated Timestamp of the last change of the net flow\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getNetFlowInfo(ISuperToken token, address account)\n        internal view\n        returns (uint256 lastUpdated, int96 flowRate, uint256 deposit, uint256 owedDeposit)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        return cfa.getAccountFlowInfo(token, account);\n    }\n\n    /**\n     * @dev calculate buffer for a flow rate\n     * @param token The token used in flow\n     * @param flowRate The flowrate to calculate the needed buffer for\n     * @return bufferAmount The buffer amount based on flowRate, liquidationPeriod and minimum deposit\n     */\n    function getBufferAmountByFlowRate(ISuperToken token, int96 flowRate) internal view\n        returns (uint256 bufferAmount)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        return cfa.getDepositRequiredForFlowRate(token, flowRate);\n    }\n\n    /**\n     * @dev get existing flow permissions\n     * @param token The token used in flow\n     * @param sender sender of a flow\n     * @param flowOperator the address we are checking permissions of for sender & token\n     * @return allowCreate is true if the flowOperator can create flows\n     * @return allowUpdate is true if the flowOperator can update flows\n     * @return allowDelete is true if the flowOperator can delete flows\n     * @return flowRateAllowance The flow rate allowance the flowOperator is granted (only goes down)\n     */\n    function getFlowPermissions(ISuperToken token, address sender, address flowOperator)\n        internal view\n        returns (bool allowCreate, bool allowUpdate, bool allowDelete, int96 flowRateAllowance)\n    {\n        (, IConstantFlowAgreementV1 cfa) = _getHostAndCFA(token);\n        uint8 permissionsBitmask;\n        (, permissionsBitmask, flowRateAllowance) = cfa.getFlowOperatorData(token, sender, flowOperator);\n        allowCreate = permissionsBitmask & 1 == 1 ? true : false;\n        allowUpdate = permissionsBitmask >> 1 & 1 == 1 ? true : false;\n        allowDelete = permissionsBitmask >> 2 & 1 == 1 ? true : false;\n    }\n\n\n     /** IDA VIEW FUNCTIONS ************************************* */\n\n\n    /**\n     * @dev Gets an index by its ID and publisher.\n     * @param token Super token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @return exist True if the index exists.\n     * @return indexValue Total value of the index.\n     * @return totalUnitsApproved Units of the index approved by subscribers.\n     * @return totalUnitsPending Units of teh index not yet approved by subscribers.\n     */\n    function getIndex(ISuperToken token, address publisher, uint32 indexId)\n        internal view\n        returns (bool exist, uint128 indexValue, uint128 totalUnitsApproved, uint128 totalUnitsPending)\n    {\n        (, IInstantDistributionAgreementV1 ida) = _getHostAndIDA(token);\n        return ida.getIndex(token, publisher, indexId);\n    }\n\n    /**\n     * @dev Calculates the distribution amount based on the amount of tokens desired to distribute.\n     * @param token Super token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param amount Amount of tokens desired to distribute.\n     * @return actualAmount Amount to be distributed with correct rounding.\n     * @return newIndexValue The index value after the distribution would be called.\n     */\n    function calculateDistribution(ISuperToken token, address publisher, uint32 indexId, uint256 amount)\n        internal view\n        returns (uint256 actualAmount, uint128 newIndexValue)\n    {\n        (, IInstantDistributionAgreementV1 ida) = _getHostAndIDA(token);\n        return ida.calculateDistribution(token, publisher, indexId, amount);\n    }\n\n    /**\n     * @dev List all subscriptions of an address\n     * @param token Super token used in the indexes listed.\n     * @param subscriber Subscriber address.\n     * @return publishers Publishers of the indices.\n     * @return indexIds IDs of the indices.\n     * @return unitsList Units owned of the indices.\n     */\n    function listSubscriptions(\n        ISuperToken token,\n        address subscriber\n    )\n        internal view\n        returns (\n            address[] memory publishers,\n            uint32[] memory indexIds,\n            uint128[] memory unitsList\n        )\n    {\n        (, IInstantDistributionAgreementV1 ida) = _getHostAndIDA(token);\n        return ida.listSubscriptions(token, subscriber);\n    }\n\n    /**\n     * @dev Gets subscription by publisher, index id, and subscriber.\n     * @param token Super token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber to the index.\n     * @return exist True if the subscription exists.\n     * @return approved True if the subscription has been approved by the subscriber.\n     * @return units Units held by the subscriber\n     * @return pendingDistribution If not approved, the amount to be claimed on approval.\n     */\n    function getSubscription(ISuperToken token, address publisher, uint32 indexId, address subscriber)\n        internal view\n        returns (bool exist, bool approved, uint128 units, uint256 pendingDistribution)\n    {\n        (, IInstantDistributionAgreementV1 ida) = _getHostAndIDA(token);\n        return ida.getSubscription(token, publisher, indexId, subscriber);\n    }\n\n    /*\n     * @dev Gets subscription by the agreement ID.\n     * @param token Super Token used with the index.\n     * @param agreementId Agreement ID, unique to the subscriber and index ID.\n     * @return publisher Publisher of the index.\n     * @return indexId ID of the index.\n     * @return approved True if the subscription has been approved by the subscriber.\n     * @return units Units held by the subscriber\n     * @return pendingDistribution If not approved, the amount to be claimed on approval.\n     */\n    function getSubscriptionByID(ISuperToken token, bytes32 agreementId)\n        internal view\n        returns (\n            address publisher,\n            uint32 indexId,\n            bool approved,\n            uint128 units,\n            uint256 pendingDistribution\n        )\n    {\n        (, IInstantDistributionAgreementV1 ida) = _getHostAndIDA(token);\n        return ida.getSubscriptionByID(token, agreementId);\n    }\n\n\n    /** IDA BASE FUNCTIONS ************************************* */\n\n\n    /**\n     * @dev Creates a new index.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     */\n    function createIndex(\n        ISuperToken token,\n        uint32 indexId\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.createIndex,\n                (\n                    token,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates a new index with userData.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param userData Arbitrary user data field.\n     */\n    function createIndex(\n        ISuperToken token,\n        uint32 indexId,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.createIndex,\n                (\n                    token,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates an index value. This distributes an amount of tokens equal to\n     * `indexValue - lastIndexValue`. See `distribute` for another way to distribute.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param indexValue New TOTAL index value, this will equal the total amount distributed.\n     */\n    function updateIndexValue(\n        ISuperToken token,\n        uint32 indexId,\n        uint128 indexValue\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.updateIndex,\n                (\n                    token,\n                    indexId,\n                    indexValue,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates an index value with userData. This distributes an amount of tokens equal to\n     * `indexValue - lastIndexValue`. See `distribute` for another way to distribute.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param indexValue New TOTAL index value, this will equal the total amount distributed.\n     * @param userData Arbitrary user data field.\n     */\n    function updateIndexValue(\n        ISuperToken token,\n        uint32 indexId,\n        uint128 indexValue,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.updateIndex,\n                (\n                    token,\n                    indexId,\n                    indexValue,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Distributes tokens in a more developer friendly way than `updateIndex`. Instead of\n     * passing the new total index value, this function will increase the index value by `amount`.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param amount Amount by which the index value should increase.\n     */\n    function distribute(\n        ISuperToken token,\n        uint32 indexId,\n        uint256 amount\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.distribute,\n                (\n                    token,\n                    indexId,\n                    amount,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Distributes tokens in a more developer friendly way than `updateIndex` (w user data). Instead of\n     * passing the new total index value, this function will increase the index value by `amount`.\n     * This takes arbitrary user data.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param amount Amount by which the index value should increase.\n     * @param userData Arbitrary user data field.\n     */\n    function distribute(\n        ISuperToken token,\n        uint32 indexId,\n        uint256 amount,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.distribute,\n                (\n                    token,\n                    indexId,\n                    amount,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Approves a subscription to an index. The subscriber's real time balance will not update\n     * until the subscription is approved, but once approved, the balance will be updated with\n     * prior distributions.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     */\n    function approveSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.approveSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Approves a subscription to an index with user data. The subscriber's real time balance will not update\n     * until the subscription is approved, but once approved, the balance will be updated with\n     * prior distributions.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param userData Arbitrary user data field.\n     */\n    function approveSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.approveSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Revokes a previously approved subscription.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     */\n    function revokeSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.revokeSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Revokes a previously approved subscription. This takes arbitrary user data.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param userData Arbitrary user data field.\n     */\n    function revokeSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.revokeSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates the units of a subscription. This changes the number of shares the subscriber holds\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be updated.\n     * @param units New number of units the subscriber holds.\n     */\n    function updateSubscriptionUnits(\n        ISuperToken token,\n        uint32 indexId,\n        address subscriber,\n        uint128 units\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n         ida,\n            abi.encodeCall(\n                ida.updateSubscription,\n                (\n                    token,\n                    indexId,\n                    subscriber,\n                    units,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates the units of a subscription. This changes the number of shares the subscriber\n     * holds. This takes arbitrary user data.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be updated.\n     * @param units New number of units the subscriber holds.\n     * @param userData Arbitrary user data field.\n     */\n    function updateSubscriptionUnits(\n        ISuperToken token,\n        uint32 indexId,\n        address subscriber,\n        uint128 units,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n         ida,\n            abi.encodeCall(\n                ida.updateSubscription,\n                (\n                    token,\n                    indexId,\n                    subscriber,\n                    units,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Deletes a subscription, setting a subcriber's units to zero\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be deleted.\n     */\n    function deleteSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.deleteSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Deletes a subscription, setting a subcriber's units to zero. This takes arbitrary userdata.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be deleted.\n     * @param userData Arbitrary user data field.\n     */\n    function deleteSubscription(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes memory userData\n    ) internal returns (bool) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.deleteSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /**\n     * @dev Claims pending distribution. Subscription should not be approved\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address that receives the claim.\n     */\n    function claim(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber\n    ) internal returns (bool) {\n         (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.claim,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Claims pending distribution. Subscription should not be approved. This takes arbitrary user data.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address that receives the claim.\n     * @param userData Arbitrary user data field.\n     */\n    function claim(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes memory userData\n    ) internal returns (bool) {\n         (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        host.callAgreement(\n            ida,\n            abi.encodeCall(\n                ida.claim,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            userData\n        );\n        return true;\n    }\n\n    /** IDA WITH CTX FUNCTIONS ************************************* */\n\n    /**\n     * @dev Creates a new index with ctx.\n     * Meant for usage in super app callbacks\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param ctx from super app callback\n     */\n    function createIndexWithCtx(\n        ISuperToken token,\n        uint32 indexId,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.createIndex,\n                (\n                    token,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Updates an index value with ctx. This distributes an amount of tokens equal to\n     * `indexValue - lastIndexValue`. See `distribute` for another way to distribute.\n     * Meant for usage in super app callbakcs\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param indexValue New TOTAL index value, this will equal the total amount distributed.\n     * @param ctx from super app callback\n     */\n    function updateIndexValueWithCtx(\n        ISuperToken token,\n        uint32 indexId,\n        uint128 indexValue,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.updateIndex,\n                (\n                    token,\n                    indexId,\n                    indexValue,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Distributes tokens in a more developer friendly way than `updateIndex`.Instead of\n     * passing the new total index value, this function will increase the index value by `amount`.\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param amount Amount by which the index value should increase.\n     * @param ctx from super app callback\n     */\n    function distributeWithCtx(\n        ISuperToken token,\n        uint32 indexId,\n        uint256 amount,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.distribute,\n                (\n                    token,\n                    indexId,\n                    amount,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Approves a subscription to an index. The subscriber's real time balance will not update\n     * until the subscription is approved, but once approved, the balance will be updated with\n     * prior distributions.\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param ctx from super app callback\n     */\n    function approveSubscriptionWithCtx(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.approveSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Revokes a previously approved subscription. Meant for usage in super apps\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param ctx from super app callback\n     */\n    function revokeSubscriptionWithCtx(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.revokeSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Updates the units of a subscription. This changes the number of shares the subscriber\n     * holds. Meant for usage in super apps\n     * @param token Super Token used with the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be updated.\n     * @param units New number of units the subscriber holds.\n     * @param ctx from super app callback\n     */\n    function updateSubscriptionUnitsWithCtx(\n        ISuperToken token,\n        uint32 indexId,\n        address subscriber,\n        uint128 units,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n         ida,\n            abi.encodeCall(\n                ida.updateSubscription,\n                (\n                    token,\n                    indexId,\n                    subscriber,\n                    units,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Deletes a subscription, setting a subcriber's units to zero.\n     * Meant for usage in super apps\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address whose units are to be deleted.\n     * @param ctx from super app callback\n     */\n    function deleteSubscriptionWithCtx(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n        (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.deleteSubscription,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    /**\n     * @dev Claims pending distribution. Subscription should not be approved.\n     * Meant for usage in super app callbacks\n     * @param token Super Token used with the index.\n     * @param publisher Publisher of the index.\n     * @param indexId ID of the index.\n     * @param subscriber Subscriber address that receives the claim.\n     * @param ctx from super app callback\n     */\n    function claimWithCtx(\n        ISuperToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes memory ctx\n    ) internal returns (bytes memory newCtx) {\n         (ISuperfluid host, IInstantDistributionAgreementV1 ida) = _getAndCacheHostAndIDA(token);\n        (newCtx, ) = host.callAgreementWithContext(\n            ida,\n            abi.encodeCall(\n                ida.claim,\n                (\n                    token,\n                    publisher,\n                    indexId,\n                    subscriber,\n                    new bytes(0) // ctx placeholder\n                )\n            ),\n            \"0x\",\n            ctx\n        );\n    }\n\n    // ************** private helpers **************\n\n    // keccak256(\"org.superfluid-finance.apps.SuperTokenLibrary.v1.host\")\n    bytes32 private constant _HOST_SLOT = 0x65599bf746e17a00ea62e3610586992d88101b78eec3cf380706621fb97ea837;\n    // keccak256(\"org.superfluid-finance.apps.SuperTokenLibrary.v1.cfa\")\n    bytes32 private constant _CFA_SLOT = 0xb969d79d88acd02d04ed7ee7d43b949e7daf093d363abcfbbc43dfdfd1ce969a;\n    // keccak256(\"org.superfluid-finance.apps.SuperTokenLibrary.v1.ida\");\n    bytes32 private constant _IDA_SLOT = 0xa832ee1924ea960211af2df07d65d166232018f613ac6708043cd8f8773eddeb;\n\n    // gets the host and cfa addrs for the token and caches it in storage for gas efficiency\n    // to be used in state changing methods\n    function _getAndCacheHostAndCFA(ISuperToken token) private\n        returns(ISuperfluid host, IConstantFlowAgreementV1 cfa)\n    {\n        // check if already in contract storage...\n        assembly { // solium-disable-line\n            host := sload(_HOST_SLOT)\n            cfa := sload(_CFA_SLOT)\n        }\n        if (address(cfa) == address(0)) {\n            // framework contract addrs not yet cached, retrieving now...\n            if (address(host) == address(0)) {\n                host = ISuperfluid(token.getHost());\n            }\n            cfa = IConstantFlowAgreementV1(address(ISuperfluid(host).getAgreementClass(\n                //keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\")\n                    0xa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3)));\n            // now that we got them and are in a transaction context, persist in storage\n            assembly {\n            // solium-disable-line\n                sstore(_HOST_SLOT, host)\n                sstore(_CFA_SLOT, cfa)\n            }\n        }\n        assert(address(host) != address(0));\n        assert(address(cfa) != address(0));\n    }\n\n    // gets the host and ida addrs for the token and caches it in storage for gas efficiency\n    // to be used in state changing methods\n    function _getAndCacheHostAndIDA(ISuperToken token) private\n        returns(ISuperfluid host, IInstantDistributionAgreementV1 ida)\n    {\n        // check if already in contract storage...\n        assembly { // solium-disable-line\n            host := sload(_HOST_SLOT)\n            ida := sload(_IDA_SLOT)\n        }\n        if (address(ida) == address(0)) {\n            // framework contract addrs not yet cached, retrieving now...\n            if (address(host) == address(0)) {\n                host = ISuperfluid(token.getHost());\n            }\n            ida = IInstantDistributionAgreementV1(address(ISuperfluid(host).getAgreementClass(\n                    keccak256(\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\"))));\n            // now that we got them and are in a transaction context, persist in storage\n            assembly {\n            // solium-disable-line\n                sstore(_HOST_SLOT, host)\n                sstore(_IDA_SLOT, ida)\n            }\n        }\n        assert(address(host) != address(0));\n        assert(address(ida) != address(0));\n    }\n\n    // gets the host and cfa addrs for the token\n    // to be used in non-state changing methods (view functions)\n    function _getHostAndCFA(ISuperToken token) private view\n        returns(ISuperfluid host, IConstantFlowAgreementV1 cfa)\n    {\n        // check if already in contract storage...\n        assembly { // solium-disable-line\n            host := sload(_HOST_SLOT)\n            cfa := sload(_CFA_SLOT)\n        }\n        if (address(cfa) == address(0)) {\n            // framework contract addrs not yet cached in storage, retrieving now...\n            if (address(host) == address(0)) {\n                host = ISuperfluid(token.getHost());\n            }\n            cfa = IConstantFlowAgreementV1(address(ISuperfluid(host).getAgreementClass(\n                //keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\")\n                    0xa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3)));\n        }\n        assert(address(host) != address(0));\n        assert(address(cfa) != address(0));\n    }\n\n    // gets the host and ida addrs for the token\n    // to be used in non-state changing methods (view functions)\n    function _getHostAndIDA(ISuperToken token) private view\n        returns(ISuperfluid host, IInstantDistributionAgreementV1 ida)\n    {\n        // check if already in contract storage...\n        assembly { // solium-disable-line\n            host := sload(_HOST_SLOT)\n            ida := sload(_IDA_SLOT)\n        }\n        if (address(ida) == address(0)) {\n            // framework contract addrs not yet cached in storage, retrieving now...\n            if (address(host) == address(0)) {\n                host = ISuperfluid(token.getHost());\n            }\n            ida = IInstantDistributionAgreementV1(address(ISuperfluid(host).getAgreementClass(\n                //keccak256(\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\")\n                    0x15609310ae3c30189a1218b7adabaf36c267255e70cf91b6cba384367d9eda32)));\n        }\n        assert(address(host) != address(0));\n        assert(address(ida) != address(0));\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error CFA_ACL_NO_SENDER_CREATE();               // 0x4b993136\n    error CFA_ACL_NO_SENDER_UPDATE();               // 0xedfa0d3b\n    error CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS(); // 0xa3eab6ac\n    error CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS(); // 0xac434b5f\n    error CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS(); // 0xe30f1bff\n    error CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED();   // 0xa0645c1f\n    error CFA_ACL_UNCLEAN_PERMISSIONS();            // 0x7939d66c\n    error CFA_ACL_NO_SENDER_FLOW_OPERATOR();        // 0xb0ed394d\n    error CFA_ACL_NO_NEGATIVE_ALLOWANCE();          // 0x86e0377d\n    error CFA_FLOW_ALREADY_EXISTS();                // 0x801b6863\n    error CFA_FLOW_DOES_NOT_EXIST();                // 0x5a32bf24\n    error CFA_INSUFFICIENT_BALANCE();               // 0xea76c9b3\n    error CFA_ZERO_ADDRESS_SENDER();                // 0x1ce9b067\n    error CFA_ZERO_ADDRESS_RECEIVER();              // 0x78e02b2a\n    error CFA_HOOK_OUT_OF_GAS();                    // 0x9f76430b\n    error CFA_DEPOSIT_TOO_BIG();                    // 0x752c2b9c\n    error CFA_FLOW_RATE_TOO_BIG();                  // 0x0c9c55c1\n    error CFA_NON_CRITICAL_SENDER();                // 0xce11b5d1\n    error CFA_INVALID_FLOW_RATE();                  // 0x91acad16\n    error CFA_NO_SELF_FLOW();                       // 0xa47338ef\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * @custom:note \n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        external view virtual\n        returns (bool isCurrentlyPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return bool Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp\n    )\n        public view virtual\n        returns (bool);\n\n    /**\n     * @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param permissions A bitmask representation of the granted permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowOperatorPermissions(\n        ISuperfluidToken token,\n        address flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance,\n        bytes calldata ctx\n    ) \n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function authorizeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n     * @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n     * @dev `permissions` and `flowRateAllowance` will both be set to 0\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n     * @param token Super token address\n     * @param sender The permission granter address\n     * @param flowOperator The permission grantee address\n     * @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorData(\n       ISuperfluidToken token,\n       address sender,\n       address flowOperator\n    )\n        public view virtual\n        returns (\n            bytes32 flowOperatorId,\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Get flow operator using flowOperatorId\n     * @param token Super token address\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorDataByID(\n       ISuperfluidToken token,\n       bytes32 flowOperatorId\n    )\n        external view virtual\n        returns (\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Create a flow between sender and receiver\n    * @dev A flow created by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function createFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Update a flow between sender and receiver\n    * @dev A flow updated by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function updateFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * @custom:callbacks \n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     */\n    function deleteFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n     \n    /**\n     * @dev Flow operator updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param flowOperator Flow operator address\n     * @param permissions Octo bitmask representation of permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    event FlowOperatorUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance\n    );\n\n    /**\n     * @dev Flow updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param receiver Flow recipient address\n     * @param flowRate Flow rate in amount per second for this flow\n     * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n     * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n     * @param userData The user provided data\n     *\n     */\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    /**\n     * @dev Flow updated extension event\n     * @param flowOperator Flow operator address - the Context.msgSender\n     * @param deposit The deposit amount for the stream\n     */\n    event FlowUpdatedExtension(\n        address indexed flowOperator,\n        uint256 deposit\n    );\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @title Instant Distribution Agreement interface\n * @author Superfluid\n *\n * @notice \n *   - A publisher can create as many as indices as possibly identifiable with `indexId`.\n *     - `indexId` is deliberately limited to 32 bits, to avoid the chance for sha-3 collision.\n *       Despite knowing sha-3 collision is only theoretical.\n *   - A publisher can create a subscription to an index for any subscriber.\n *   - A subscription consists of:\n *     - The index it subscribes to.\n *     - Number of units subscribed.\n *   - An index consists of:\n *     - Current value as `uint128 indexValue`.\n *     - Total units of the approved subscriptions as `uint128 totalUnitsApproved`.\n *     - Total units of the non approved subscription as `uint128 totalUnitsPending`.\n *   - A publisher can update an index with a new value that doesn't decrease.\n *   - A publisher can update a subscription with any number of units.\n *   - A publisher or a subscriber can delete a subscription and reset its units to zero.\n *   - A subscriber must approve the index in order to receive distributions from the publisher\n *     each time the index is updated.\n *     - The amount distributed is $$\\Delta{index} * units$$\n *   - Distributions to a non approved subscription stays in the publisher's deposit until:\n *     - the subscriber approves the subscription (side effect),\n *     - the publisher updates the subscription (side effect),\n *     - the subscriber deletes the subscription even if it is never approved (side effect),\n *     - or the subscriber can explicitly claim them.\n */\nabstract contract IInstantDistributionAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error IDA_INDEX_SHOULD_GROW();             // 0xcfdca725\n    error IDA_OPERATION_NOT_ALLOWED();         // 0x92da6d17\n    error IDA_INDEX_ALREADY_EXISTS();          // 0x5c02a517\n    error IDA_INDEX_DOES_NOT_EXIST();          // 0xedeaa63b\n    error IDA_SUBSCRIPTION_DOES_NOT_EXIST();   // 0xb6c8c980\n    error IDA_SUBSCRIPTION_ALREADY_APPROVED(); // 0x3eb2f849\n    error IDA_SUBSCRIPTION_IS_NOT_APPROVED();  // 0x37412573\n    error IDA_INSUFFICIENT_BALANCE();          // 0x16e759bb\n    error IDA_ZERO_ADDRESS_SUBSCRIBER();       // 0xc90a4674\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\");\n    }\n\n    /**************************************************************************\n     * Index operations\n     *************************************************************************/\n\n    /**\n     * @dev Create a new index for the publisher\n     * @param token Super token address\n     * @param indexId Id of the index\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * None\n     */\n    function createIndex(\n        ISuperfluidToken token,\n        uint32 indexId,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n    /**\n    * @dev Index created event\n    * @param token Super token address\n    * @param publisher Index creator and publisher\n    * @param indexId The specified indexId of the newly created index\n    * @param userData The user provided data\n    */\n    event IndexCreated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        bytes userData);\n\n    /**\n     * @dev Query the data of a index\n     * @param token Super token address\n     * @param publisher The publisher of the index\n     * @param indexId Id of the index\n     * @return exist Does the index exist\n     * @return indexValue Value of the current index\n     * @return totalUnitsApproved Total units approved for the index\n     * @return totalUnitsPending Total units pending approval for the index\n     */\n    function getIndex(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId)\n            external\n            view\n            virtual\n            returns(\n                bool exist,\n                uint128 indexValue,\n                uint128 totalUnitsApproved,\n                uint128 totalUnitsPending);\n\n    /**\n     * @dev Calculate actual distribution amount\n     * @param token Super token address\n     * @param publisher The publisher of the index\n     * @param indexId Id of the index\n     * @param amount The amount of tokens desired to be distributed\n     * @return actualAmount The amount to be distributed after ensuring no rounding errors\n     * @return newIndexValue The index value given the desired amount of tokens to be distributed\n     */\n    function calculateDistribution(\n       ISuperfluidToken token,\n       address publisher,\n       uint32 indexId,\n       uint256 amount)\n           external view\n           virtual\n           returns(\n               uint256 actualAmount,\n               uint128 newIndexValue);\n\n    /**\n     * @dev Update index value of an index\n     * @param token Super token address\n     * @param indexId Id of the index\n     * @param indexValue Value of the index\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * None\n     */\n    function updateIndex(\n        ISuperfluidToken token,\n        uint32 indexId,\n        uint128 indexValue,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n    /**\n      * @dev Index updated event\n      * @param token Super token address\n      * @param publisher Index updater and publisher\n      * @param indexId The specified indexId of the updated index\n      * @param oldIndexValue The previous index value\n      * @param newIndexValue The updated index value\n      * @param totalUnitsPending The total units pending when the indexValue was updated\n      * @param totalUnitsApproved The total units approved when the indexValue was updated\n      * @param userData The user provided data\n      */\n    event IndexUpdated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        uint128 oldIndexValue,\n        uint128 newIndexValue,\n        uint128 totalUnitsPending,\n        uint128 totalUnitsApproved,\n        bytes userData);\n\n    /**\n     * @dev Distribute tokens through the index\n     * @param token Super token address\n     * @param indexId Id of the index\n     * @param amount The amount of tokens desired to be distributed\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:note \n     * - This is a convenient version of updateIndex. It adds to the index\n     *   a delta that equals to `amount / totalUnits`\n     * - The actual amount distributed could be obtained via\n     *   `calculateDistribution`. This is due to precision error with index\n     *   value and units data range\n     *\n     * @custom:callbacks \n     * None\n     */\n    function distribute(\n        ISuperfluidToken token,\n        uint32 indexId,\n        uint256 amount,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n\n    /**************************************************************************\n     * Subscription operations\n     *************************************************************************/\n\n    /**\n     * @dev Approve the subscription of an index\n     * @param token Super token address\n     * @param publisher The publisher of the index\n     * @param indexId Id of the index\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - if subscription exist\n     *   - AgreementCreated callback to the publisher:\n     *      - agreementId is for the subscription\n     * - if subscription does not exist\n     *   - AgreementUpdated callback to the publisher:\n     *      - agreementId is for the subscription\n     */\n    function approveSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n    /**\n      * @dev Index subscribed event\n      * @param token Super token address\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param subscriber The approved subscriber\n      * @param userData The user provided data\n      */\n    event IndexSubscribed(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        bytes userData);\n\n    /**\n      * @dev Subscription approved event\n      * @param token Super token address\n      * @param subscriber The approved subscriber\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param userData The user provided data\n      */\n    event SubscriptionApproved(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        bytes userData);\n\n    /**\n    * @notice Revoke the subscription of an index\n    * @dev \"Unapproves\" the subscription and moves approved units to pending\n    * @param token Super token address\n    * @param publisher The publisher of the index\n    * @param indexId Id of the index\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    *\n    * @custom:callbacks \n    * - AgreementUpdated callback to the publisher:\n    *    - agreementId is for the subscription\n    */\n    function revokeSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        bytes calldata ctx)\n         external\n         virtual\n         returns(bytes memory newCtx);\n    /**\n      * @dev Index unsubscribed event\n      * @param token Super token address\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param subscriber The unsubscribed subscriber\n      * @param userData The user provided data\n      */\n    event IndexUnsubscribed(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        bytes userData);\n    \n    /**\n      * @dev Subscription approved event\n      * @param token Super token address\n      * @param subscriber The approved subscriber\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param userData The user provided data\n      */\n    event SubscriptionRevoked(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        bytes userData);\n\n    /**\n     * @dev Update the nuber of units of a subscription\n     * @param token Super token address\n     * @param indexId Id of the index\n     * @param subscriber The subscriber of the index\n     * @param units Number of units of the subscription\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - if subscription exist\n     *   - AgreementCreated callback to the subscriber:\n     *      - agreementId is for the subscription\n     * - if subscription does not exist\n     *   - AgreementUpdated callback to the subscriber:\n     *      - agreementId is for the subscription\n     */\n    function updateSubscription(\n        ISuperfluidToken token,\n        uint32 indexId,\n        address subscriber,\n        uint128 units,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    /**\n      * @dev Index units updated event\n      * @param token Super token address\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param subscriber The subscriber units updated\n      * @param units The new units amount\n      * @param userData The user provided data\n      */\n    event IndexUnitsUpdated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        uint128 units,\n        bytes userData);\n    \n    /**\n      * @dev Subscription units updated event\n      * @param token Super token address\n      * @param subscriber The subscriber units updated\n      * @param indexId The specified indexId\n      * @param publisher Index publisher\n      * @param units The new units amount\n      * @param userData The user provided data\n      */\n    event SubscriptionUnitsUpdated(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        uint128 units,\n        bytes userData);\n\n    /**\n     * @dev Get data of a subscription\n     * @param token Super token address\n     * @param publisher The publisher of the index\n     * @param indexId Id of the index\n     * @param subscriber The subscriber of the index\n     * @return exist Does the subscription exist?\n     * @return approved Is the subscription approved?\n     * @return units Units of the suscription\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription\n     */\n    function getSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber)\n            external\n            view\n            virtual\n            returns(\n                bool exist,\n                bool approved,\n                uint128 units,\n                uint256 pendingDistribution\n            );\n\n    /**\n     * @notice Get data of a subscription by agreement ID\n     * @dev indexId (agreementId) is the keccak256 hash of encodePacked(\"publisher\", publisher, indexId)\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return publisher The publisher of the index\n     * @return indexId Id of the index\n     * @return approved Is the subscription approved?\n     * @return units Units of the suscription\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription\n     */\n    function getSubscriptionByID(\n        ISuperfluidToken token,\n        bytes32 agreementId)\n            external\n            view\n            virtual\n            returns(\n                address publisher,\n                uint32 indexId,\n                bool approved,\n                uint128 units,\n                uint256 pendingDistribution\n            );\n\n    /**\n     * @dev List subscriptions of an user\n     * @param token Super token address\n     * @param subscriber The subscriber's address\n     * @return publishers Publishers of the subcriptions\n     * @return indexIds Indexes of the subscriptions\n     * @return unitsList Units of the subscriptions\n     */\n    function listSubscriptions(\n        ISuperfluidToken token,\n        address subscriber)\n            external\n            view\n            virtual\n            returns(\n                address[] memory publishers,\n                uint32[] memory indexIds,\n                uint128[] memory unitsList);\n\n    /**\n     * @dev Delete the subscription of an user\n     * @param token Super token address\n     * @param publisher The publisher of the index\n     * @param indexId Id of the index\n     * @param subscriber The subscriber's address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - if the subscriber called it\n     *   - AgreementTerminated callback to the publsiher:\n     *      - agreementId is for the subscription\n     * - if the publisher called it\n     *   - AgreementTerminated callback to the subscriber:\n     *      - agreementId is for the subscription\n     */\n    function deleteSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    /**\n    * @dev Claim pending distributions\n    * @param token Super token address\n    * @param publisher The publisher of the index\n    * @param indexId Id of the index\n    * @param subscriber The subscriber's address\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    *\n    * @custom:note The subscription should not be approved yet\n    *\n    * @custom:callbacks \n    * - AgreementUpdated callback to the publisher:\n    *    - agreementId is for the subscription\n    */\n    function claim(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes calldata ctx)\n        external\n        virtual\n        returns(bytes memory newCtx);\n    \n    /**\n      * @dev Index distribution claimed event\n      * @param token Super token address\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param subscriber The subscriber units updated\n      * @param amount The pending amount claimed\n      */\n    event IndexDistributionClaimed(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        uint256 amount);\n    \n    /**\n      * @dev Subscription distribution claimed event\n      * @param token Super token address\n      * @param subscriber The subscriber units updated\n      * @param publisher Index publisher\n      * @param indexId The specified indexId\n      * @param amount The pending amount claimed\n      */\n    event SubscriptionDistributionClaimed(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        uint256 amount);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppCallbackLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appCallbackLevel, uint8 callType)\n    {\n        appCallbackLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appCallbackLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appCallbackLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Flow Operator definitions library\n  * @author Superfluid\n */\n library FlowOperatorDefinitions {\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_CREATE = uint8(1) << 0;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_UPDATE = uint8(1) << 1;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_DELETE = uint8(1) << 2;\n    uint8 constant internal AUTHORIZE_FULL_CONTROL =\n        AUTHORIZE_FLOW_OPERATOR_CREATE | AUTHORIZE_FLOW_OPERATOR_UPDATE | AUTHORIZE_FLOW_OPERATOR_DELETE;\n    uint8 constant internal REVOKE_FLOW_OPERATOR_CREATE = ~(uint8(1) << 0);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_UPDATE = ~(uint8(1) << 1);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_DELETE = ~(uint8(1) << 2);\n\n    function isPermissionsClean(uint8 permissions) internal pure returns (bool) {\n        return (\n            permissions & ~(AUTHORIZE_FLOW_OPERATOR_CREATE\n                | AUTHORIZE_FLOW_OPERATOR_UPDATE\n                | AUTHORIZE_FLOW_OPERATOR_DELETE)\n            ) == uint8(0);\n    }\n }\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev ERC777.send batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationSend(\n     *     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC777_SEND = 3;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes callData, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure returns (uint256 liquidationPeriod, uint256 patricianPeriod) {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * @custom:note \n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass arbitary information to the after-hook callback.\n    *\n    * @custom:note \n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    BatchOperation,\n    ContextDefinitions,\n    FlowOperatorDefinitions,\n    SuperAppDefinitions,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * @notice This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    // Superfluid Custom Errors\n    error HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION();              // 0xef4295f6\n    error HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE();           // 0x474e7641\n    error HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS();    // 0x0cd0ebc2\n    error HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS();   // 0x473f7bd4\n    error HOST_INVALID_CONFIG_WORD();                           // 0xf4c802a4\n    error HOST_MAX_256_AGREEMENTS();                            // 0x7c281a78\n    error HOST_NON_UPGRADEABLE();                               // 0x14f72c9f\n    error HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX();               // 0x67e9985b\n    error HOST_ONLY_GOVERNANCE();                               // 0xc5d22a4e\n    error HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE();             // 0xb4770115\n    error HOST_AGREEMENT_ALREADY_REGISTERED();                  // 0xdc9ddba8\n    error HOST_AGREEMENT_IS_NOT_REGISTERED();                   // 0x1c9e9bea\n    error HOST_MUST_BE_CONTRACT();                              // 0xd4f6b30c\n    error HOST_ONLY_LISTED_AGREEMENT();                         // 0x619c5359\n\n    // App Related Custom Errors\n    // uses SuperAppDefinitions' App Jail Reasons as _code\n    error APP_RULE(uint256 _code);                              // 0xa85ba64f\n\n    error HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY(); // 0x19ab84d1\n    error HOST_NOT_A_SUPER_APP();                               // 0x163cbe43\n    error HOST_NO_APP_REGISTRATION_PERMISSIONS();               // 0x5b93ebf0\n    error HOST_RECEIVER_IS_NOT_SUPER_APP();                     // 0x96aa315e\n    error HOST_SENDER_IS_NOT_SUPER_APP();                       // 0xbacfdc40\n    error HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL();             // 0x44725270\n    error HOST_SUPER_APP_IS_JAILED();                           // 0x02384b64\n    error HOST_SUPER_APP_ALREADY_REGISTERED();                  // 0x01b0a935\n    error HOST_UNAUTHORIZED_SUPER_APP_FACTORY();                // 0x289533c5\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * @custom:modifiers \n     * - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * @custom:modifiers \n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender (must be a contract) declares itself as a super app.\n     * @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n     * because app registration is currently governance permissioned on mainnets.\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares itself as a super app.\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n     * @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     * On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n     * While the message sender must be the super app itself, the transaction sender (tx.origin)\n     * must be the deployer account the registration key was issued for.\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender (must be a contract) declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n     * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app callbacklevel\n     * @param app Super app address\n     */\n    function getAppCallbackLevel(ISuperApp app) external view returns(uint8 appCallbackLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app credit and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    /**\n     * @dev (For agreements) StaticCall the app before callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return cbdata            Data returned from the callback.\n     */\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory cbdata);\n\n    /**\n     * @dev (For agreements) Call the app after callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return newCtx            The current context of the transaction.\n     */\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Create a new callback stack\n     * @param  ctx                     The current ctx, it will be validated.\n     * @param  app                     The super app.\n     * @param  appCreditGranted        App credit granted so far.\n     * @param  appCreditUsed           App credit used so far.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appCreditGranted,\n        int256 appCreditUsed,\n        ISuperfluidToken appCreditToken\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Pop from the current app callback stack\n     * @param  ctx                     The ctx that was pushed before the callback stack.\n     * @param  appCreditUsedDelta      App credit used by the app.\n     * @return newCtx                  The current context of the transaction.\n     *\n     * @custom:security\n     * - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n     * - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\n     */\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appCreditUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Use app credit.\n     * @param  ctx                      The current ctx, it will be validated.\n     * @param  appCreditUsedMore        See app credit for more details.\n     * @return newCtx                   The current context of the transaction.\n     */\n    function ctxUseCredit(\n        bytes calldata ctx,\n        int256 appCreditUsedMore\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Jail the app.\n     * @param  app                     The super app.\n     * @param  reason                  Jail reason code.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        //isAgreement(agreementClass)\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * @custom:note See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        //isValidAppAction(callData)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * @custom:note on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     * - We cannot change the structure of the Context struct because of ABI compatibility requirements\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // app callback level\n        uint8 appCallbackLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app credit granted\n        uint256 appCreditGranted;\n        // app credit wanted by the app callback\n        uint256 appCreditWantedDeprecated;\n        // app credit used, allowing negative values over a callback session\n        // the appCreditUsed value over a callback sessions is calculated with:\n        // existing flow data owed deposit + sum of the callback agreements\n        // deposit deltas \n        // the final value used to modify the state is determined by the\n        // _adjustNewAppCreditUsed function (in AgreementLibrary.sol) which takes \n        // the appCreditUsed value reached in the callback session and the app\n        // credit granted\n        int256 appCreditUsed;\n        // app address\n        address appAddress;\n        // app credit in super token\n        ISuperfluidToken appCreditToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes memory ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] calldata operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] calldata operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev Require the ctx being valid.\n     modifier requireValidCtx(bytes memory ctx) virtual;\n\n     /// @dev Assert the ctx being valid.\n     modifier assertValidCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n    \n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_GOV_ARRAYS_NOT_SAME_LENGTH();                  // 0x27743aa6\n    error SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD(); // 0xe171980a\n    error SF_GOV_MUST_BE_CONTRACT();                        // 0x80dddd73\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * @custom:note \n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();       // 0xf7f02227\n    error SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();             // 0xfe737d05\n    error SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED(); // 0xe3e13698\n    error SUPER_TOKEN_NO_UNDERLYING_TOKEN();                     // 0xf79cf656\n    error SUPER_TOKEN_ONLY_SELF();                               // 0x7ffa6648\n    error SUPER_TOKEN_ONLY_HOST();                               // 0x98f73704\n    error SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();               // 0x81638627\n    error SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();                 // 0xdf070274\n    error SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();                  // 0xba2ab184\n    error SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();                    // 0x0d243157\n    error SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();              // 0xeecd6c9b\n    error SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();                // 0xe219bd39\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * @custom:note SuperToken always uses 18 decimals.\n     *\n     * This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * @notice This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:note Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @custom:emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * @custom:note For super token contracts, this value is always 1\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply and transfers the underlying token to the caller's account.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * @custom:emits an {AuthorizedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * @custom:emits a {RevokedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * @custom:modifiers \n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to receive upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     * \n     * @custom:warning\n     * - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n     * @custom:requirements \n     * - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Downgrade SuperToken to ERC20 and transfer immediately\n     * @param to The account to receive downgraded tokens\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     */\n    function downgradeTo(address to, uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are downgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transferFrom by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC777 send by host contract.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    * @param data Arbitrary user inputted data\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_FACTORY_ALREADY_EXISTS(); // 0x91d67972\n    error SUPER_TOKEN_FACTORY_DOES_NOT_EXIST(); // 0x872cac48\n    error SUPER_TOKEN_FACTORY_UNINITIALIZED();  // 0x1b39b9b4\n    error SUPER_TOKEN_FACTORY_ONLY_HOST();      // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_ZERO_ADDRESS();   // 0x305c9e82\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @dev Get the current super token logic used by the factory\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABLE\n    }\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n     * @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n     * @param _underlyingToken Underlying ERC20 token\n     * @return ISuperToken the created supertoken\n     */\n    function createCanonicalERC20Wrapper(ERC20WithTokenInfo _underlyingToken)\n        external\n        returns (ISuperToken);\n\n    /**\n     * @notice Computes/Retrieves wrapper super token address given the underlying token address\n     * @dev We return from our canonical list if it already exists, otherwise we compute it\n     * @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n     * @param _underlyingToken Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     * @return isDeployed whether the super token is deployed AND set in the canonical mapping\n     */\n    function computeCanonicalERC20WrapperAddress(address _underlyingToken)\n        external\n        view\n        returns (address superTokenAddress, bool isDeployed);\n\n    /**\n     * @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n     * @dev We return the address if it exists and the zero address otherwise\n     * @param _underlyingTokenAddress Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     */\n    function getCanonicalERC20Wrapper(address _underlyingTokenAddress)\n        external\n        view\n        returns (address superTokenAddress);\n\n    /**\n     * @dev Creates a new custom super token\n     * @param customSuperTokenProxy address of the custom supertoken proxy\n     */\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.4;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/libs/ERC777Helper.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\nimport { IERC1820Registry } from \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\n\n/**\n * @title ERC777 helper library\n * @author Superfluid\n */\nlibrary ERC777Helper {\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY =\n        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant internal _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant internal _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n\n    /// @dev ERC777 operators support self structure\n    struct Operators {\n        address[] defaultOperatorsArray;\n        mapping(address => bool) defaultOperators;\n        mapping(address => mapping(address => bool)) operators;\n        mapping(address => mapping(address => bool)) revokedDefaultOperators;\n    }\n\n    function register(address token) internal {\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC20Token\"), address(this));\n    }\n\n    function isOperatorFor(Operators storage self, address operator, address tokenHolder) internal view returns (bool) {\n        return operator == tokenHolder ||\n            (\n                self.defaultOperators[operator] &&\n                !self.revokedDefaultOperators[tokenHolder][operator]\n            ) ||\n            self.operators[tokenHolder][operator];\n    }\n\n    function authorizeOperator(Operators storage self, address holder, address operator) internal {\n        require(holder != operator, \"ERC777Operators: authorizing self as operator\");\n\n        if (self.defaultOperators[operator]) {\n            delete self.revokedDefaultOperators[holder][operator];\n        } else {\n            self.operators[holder][operator] = true;\n        }\n    }\n\n    function revokeOperator(Operators storage self, address holder, address operator) internal {\n        require(operator != msg.sender, \"ERC777Operators: revoking self as operator\");\n        if (self.defaultOperators[operator]) {\n            self.revokedDefaultOperators[holder][operator] = true;\n        } else {\n            delete self.operators[holder][operator];\n        }\n    }\n\n    function defaultOperators(Operators storage self) internal view returns (address[] memory) {\n        return self.defaultOperatorsArray;\n    }\n\n    function setupDefaultOperators(Operators storage self, address[] memory operators) internal {\n        // According to 777 spec: default operators should only be setup once\n        assert(self.defaultOperatorsArray.length == 0);\n        self.defaultOperatorsArray = operators;\n        for (uint i = 0; i < operators.length; ++i) {\n            self.defaultOperators[operators[i]] = true;\n        }\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/libs/EventsEmitter.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\n/**\n * @title Events Emitter Library\n * @author Superfluid\n * @dev A library used for emitting missing and unaccessable events.\n *\n */\nlibrary EventsEmitter {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function emitTransfer(address from, address to, uint256 value) internal {\n        emit Transfer(from, to, value);\n    }\n}"
    },
    "@superfluid-finance/ethereum-contracts/contracts/libs/FixedSizeData.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\n/**\n * @title Utilities for fixed size data in storage\n * @author Superfluid\n *\n * When using solidity dynamic array, first word is used to store the length\n * of the array. For use cases that the length doesn't change, it is better\n * to use a fixed size data premitive.\n *\n * To use this library:\n * - The pointer to the storage is `slot`, the user could use `keccak256(abi.encode(...))`\n *   scheme to create collision-free slot ID for locating the data.\n * - To load data, or erase data and get all gas refund, data length is always required.\n */\nlibrary FixedSizeData {\n\n    /**\n     * @dev Store data to the slot at `slot`\n     */\n    function storeData(bytes32 slot, bytes32[] memory data) internal {\n        for (uint j = 0; j < data.length; ++j) {\n            bytes32 d = data[j];\n            assembly { sstore(add(slot, j), d) }\n        }\n    }\n\n    function hasData(bytes32 slot, uint dataLength) internal view returns (bool) {\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            if (uint256(d) > 0) return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Load data of size `dataLength` from the slot at `slot`\n     */\n    function loadData(bytes32 slot, uint dataLength) internal view returns (bytes32[] memory data) {\n        data = new bytes32[](dataLength);\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            data[j] = d;\n        }\n    }\n\n    /**\n     * @dev Erase data of size `dataLength` from the slot at `slot`\n     */\n    function eraseData(bytes32 slot, uint dataLength) internal {\n        for (uint j = 0; j < dataLength; ++j) {\n            assembly { sstore(add(slot, j), 0) }\n        }\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\nimport { ISuperfluid } from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperAgreement } from \"../interfaces/superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidGovernance } from \"../interfaces/superfluid/ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"../interfaces/superfluid/ISuperfluidToken.sol\";\n\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { EventsEmitter } from \"../libs/EventsEmitter.sol\";\nimport { FixedSizeData } from \"../libs/FixedSizeData.sol\";\n\n/**\n * @title Superfluid's token implementation\n *\n * @author Superfluid\n */\nabstract contract SuperfluidToken is ISuperfluidToken\n{\n\n    bytes32 private constant _REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    /// @dev Superfluid contract\n    ISuperfluid immutable internal _host;\n\n    /// @dev Active agreement bitmap\n    mapping(address => uint256) internal _inactiveAgreementBitmap;\n\n    /// @dev Shared Settled balance for the account\n    mapping(address => int256) internal _sharedSettledBalances;\n\n    /// @dev Total supply\n    uint256 internal _totalSupply;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperfluidToken solidity slot will start after _reserve13\n    uint256 internal _reserve4;\n    uint256 private _reserve5;\n    uint256 private _reserve6;\n    uint256 private _reserve7;\n    uint256 private _reserve8;\n    uint256 private _reserve9;\n    uint256 private _reserve10;\n    uint256 private _reserve11;\n    uint256 private _reserve12;\n    uint256 internal _reserve13;\n\n    constructor(\n        ISuperfluid host\n    ) {\n        _host = host;\n    }\n\n    /// @dev ISuperfluidToken.getHost implementation\n    function getHost()\n       external view\n       override(ISuperfluidToken)\n       returns(address host)\n    {\n       return address(_host);\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.realtimeBalanceOf implementation\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n       public view override\n       returns (\n           int256 availableBalance,\n           uint256 deposit,\n           uint256 owedDeposit)\n    {\n        availableBalance = _sharedSettledBalances[account];\n        ISuperAgreement[] memory activeAgreements = getAccountActiveAgreements(account);\n        for (uint256 i = 0; i < activeAgreements.length; ++i) {\n            (\n                int256 agreementDynamicBalance,\n                uint256 agreementDeposit,\n                uint256 agreementOwedDeposit) = activeAgreements[i]\n                    .realtimeBalanceOf(\n                         this,\n                         account,\n                         timestamp\n                     );\n            deposit = deposit + agreementDeposit;\n            owedDeposit = owedDeposit + agreementOwedDeposit;\n            // 1. Available Balance = Dynamic Balance - Max(0, Deposit - OwedDeposit)\n            // 2. Deposit should not be shared between agreements\n            availableBalance = availableBalance\n                + agreementDynamicBalance\n                - (\n                    agreementDeposit > agreementOwedDeposit ?\n                    (agreementDeposit - agreementOwedDeposit) : 0\n                ).toInt256();\n        }\n    }\n\n    /// @dev ISuperfluidToken.realtimeBalanceOfNow implementation\n    function realtimeBalanceOfNow(\n       address account\n    )\n        public view override\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp)\n    {\n        timestamp = _host.getNow();\n        (\n            availableBalance,\n            deposit,\n            owedDeposit\n        ) = realtimeBalanceOf(account, timestamp);\n    }\n\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isCritical)\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, timestamp);\n        return availableBalance < 0;\n    }\n\n    function isAccountCriticalNow(\n       address account\n    )\n        external view override\n       returns(bool isCritical)\n    {\n        return isAccountCritical(account, _host.getNow());\n    }\n\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isSolvent)\n    {\n        (int256 availableBalance, uint256 deposit, uint256 owedDeposit) =\n            realtimeBalanceOf(account, timestamp);\n        // Available Balance = Realtime Balance - Max(0, Deposit - OwedDeposit)\n        int realtimeBalance = availableBalance\n            + (deposit > owedDeposit ? (deposit - owedDeposit) : 0).toInt256();\n        return realtimeBalance >= 0;\n    }\n\n    function isAccountSolventNow(\n       address account\n    )\n       external view override\n       returns(bool isSolvent)\n    {\n        return isAccountSolvent(account, _host.getNow());\n    }\n\n    /// @dev ISuperfluidToken.getAccountActiveAgreements implementation\n    function getAccountActiveAgreements(address account)\n       public view override\n       returns(ISuperAgreement[] memory)\n    {\n       return _host.mapAgreementClasses(~_inactiveAgreementBitmap[account]);\n    }\n\n    /**************************************************************************\n     * Token implementation helpers\n     *************************************************************************/\n\n    function _mint(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        _sharedSettledBalances[account] = _sharedSettledBalances[account] + amount.toInt256();\n        _totalSupply = _totalSupply + amount;\n    }\n\n    function _burn(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, _host.getNow());\n        if (availableBalance < amount.toInt256()) {\n            revert SF_TOKEN_BURN_INSUFFICIENT_BALANCE();\n        }\n        _sharedSettledBalances[account] = _sharedSettledBalances[account] - amount.toInt256();\n        _totalSupply = _totalSupply - amount;\n    }\n\n    function _move(\n        address from,\n        address to,\n        int256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(from, _host.getNow());\n        if (availableBalance < amount) {\n            revert SF_TOKEN_MOVE_INSUFFICIENT_BALANCE();\n        }\n        _sharedSettledBalances[from] = _sharedSettledBalances[from] - amount;\n        _sharedSettledBalances[to] = _sharedSettledBalances[to] + amount;\n    }\n\n    function _getRewardAccount() internal view returns (address rewardAccount) {\n        ISuperfluidGovernance gov = _host.getGovernance();\n        rewardAccount = gov.getConfigAsAddress(_host, this, _REWARD_ADDRESS_CONFIG_KEY);\n    }\n\n    /**************************************************************************\n     * Super Agreement hosting functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.createAgreement implementation\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        if (FixedSizeData.hasData(slot, data.length)) {\n            revert SF_TOKEN_AGREEMENT_ALREADY_EXISTS();\n        }\n        FixedSizeData.storeData(slot, data);\n        emit AgreementCreated(agreementClass, id, data);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementData implementation\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view override\n        returns(bytes32[] memory data)\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        data = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementData implementation\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        FixedSizeData.storeData(slot, data);\n        emit AgreementUpdated(msg.sender, id, data);\n    }\n\n    /// @dev ISuperfluidToken.terminateAgreement implementation\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        if (!FixedSizeData.hasData(slot,dataLength)) {\n            revert SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();\n        }\n        FixedSizeData.eraseData(slot, dataLength);\n        emit AgreementTerminated(msg.sender, id);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementState implementation\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external override\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", msg.sender, account, slotId));\n        FixedSizeData.storeData(slot, slotData);\n        emit AgreementStateUpdated(msg.sender, account, slotId);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementState implementation\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external override view\n        returns (bytes32[] memory slotData) {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", agreementClass, account, slotId));\n        slotData = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.settleBalance implementation\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external override\n        onlyAgreement\n    {\n        _sharedSettledBalances[account] = _sharedSettledBalances[account] + delta;\n    }\n\n    /// @dev ISuperfluidToken.makeLiquidationPayoutsV2 implementation\n    function makeLiquidationPayoutsV2(\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount, // the address executing the liquidation\n        bool useDefaultRewardAccount, // Whether or not the default reward account receives the rewardAmount\n        address targetAccount, // Account to be liquidated\n        uint256 rewardAmount, // The amount the rewarded account will receive\n        int256 targetAccountBalanceDelta // The delta amount the target account balance should change by\n    ) external override onlyAgreement {\n        address rewardAccount = _getRewardAccount();\n\n        // we set the rewardAccount to the user who executed the liquidation if\n        // no rewardAccount is set (aka. ANARCHY MODE - should not occur in reality, for testing purposes)\n        if (rewardAccount == address(0)) {\n            rewardAccount = liquidatorAccount;\n        }\n\n        address rewardAmountReceiver = useDefaultRewardAccount ? rewardAccount : liquidatorAccount;\n\n        if (targetAccountBalanceDelta <= 0) {\n            // LIKELY BRANCH: target account pays penalty to rewarded account\n            assert(rewardAmount.toInt256() == -targetAccountBalanceDelta);\n\n            _sharedSettledBalances[rewardAmountReceiver] += rewardAmount.toInt256();\n            _sharedSettledBalances[targetAccount] += targetAccountBalanceDelta;\n            EventsEmitter.emitTransfer(targetAccount, rewardAmountReceiver, rewardAmount);\n        } else {\n            // LESS LIKELY BRANCH: target account is bailed out\n            // NOTE: useDefaultRewardAccount being true is undefined behavior\n            // because the default reward account isn't receiving the rewardAmount by default\n            assert(!useDefaultRewardAccount);\n            _sharedSettledBalances[rewardAccount] -= (rewardAmount.toInt256() + targetAccountBalanceDelta);\n            _sharedSettledBalances[liquidatorAccount] += rewardAmount.toInt256();\n            _sharedSettledBalances[targetAccount] += targetAccountBalanceDelta;\n            EventsEmitter.emitTransfer(rewardAccount, liquidatorAccount, rewardAmount);\n            EventsEmitter.emitTransfer(rewardAccount, targetAccount, uint256(targetAccountBalanceDelta));\n        }\n\n        emit AgreementLiquidatedV2(\n            msg.sender,\n            id,\n            liquidatorAccount,\n            targetAccount,\n            rewardAmountReceiver,\n            rewardAmount,\n            targetAccountBalanceDelta,\n            liquidationTypeData\n        );\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlyAgreement() {\n        if (!_host.isAgreementClassListed(ISuperAgreement(msg.sender))) {\n            revert SF_TOKEN_ONLY_LISTED_AGREEMENT();\n        }\n        _;\n    }\n\n    modifier onlyHost() {\n        if (address(_host) != msg.sender) {\n            revert SF_TOKEN_ONLY_HOST();\n        }\n        _;\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperfluidGovernance,\n    ISuperToken,\n    ISuperAgreement,\n    IERC20,\n    IERC777,\n    TokenInfo\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperfluidToken, SuperfluidToken } from \"./SuperfluidToken.sol\";\n\nimport { ERC777Helper } from \"../libs/ERC777Helper.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { IERC777Recipient } from \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport { IERC777Sender } from \"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title Superfluid's super token implementation\n *\n * @author Superfluid\n */\ncontract SuperToken is\n    UUPSProxiable,\n    SuperfluidToken,\n    ISuperToken\n{\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using Address for address;\n    using ERC777Helper for ERC777Helper.Operators;\n    using SafeERC20 for IERC20;\n\n    uint8 constant private _STANDARD_DECIMALS = 18;\n\n    /* WARNING: NEVER RE-ORDER VARIABLES! Including the base contracts.\n       Always double-check that new\n       variables are added APPEND-ONLY. Re-ordering variables can\n       permanently BREAK the deployed proxy contract. */\n\n    /// @dev The underlying ERC20 token\n    IERC20 internal _underlyingToken;\n\n    /// @dev Decimals of the underlying token\n    uint8 internal _underlyingDecimals;\n\n    /// @dev TokenInfo Name property\n    string internal _name;\n\n    /// @dev TokenInfo Symbol property\n    string internal _symbol;\n\n    /// @dev ERC20 Allowances Storage\n    mapping(address => mapping (address => uint256)) internal _allowances;\n\n    /// @dev ERC777 operators support data\n    ERC777Helper.Operators internal _operators;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperToken solidity slot will start after _reserve22\n\n    // NOTE: Whenever modifying the storage layout here it is important to update the validateStorageLayout\n    // function in its respective mock contract to ensure that it doesn't break anything or lead to unexpected\n    // behaviors/layout when upgrading\n\n    uint256 internal _reserve22;\n    uint256 private _reserve23;\n    uint256 private _reserve24;\n    uint256 private _reserve25;\n    uint256 private _reserve26;\n    uint256 private _reserve27;\n    uint256 private _reserve28;\n    uint256 private _reserve29;\n    uint256 private _reserve30;\n    uint256 internal _reserve31;\n\n    constructor(\n        ISuperfluid host\n    )\n        SuperfluidToken(host)\n        // solhint-disable-next-line no-empty-blocks\n    {\n    }\n\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    )\n        external override\n        initializer // OpenZeppelin Initializable\n    {\n        _underlyingToken = underlyingToken;\n        _underlyingDecimals = underlyingDecimals;\n\n        _name = n;\n        _symbol = s;\n\n        // register interfaces\n        ERC777Helper.register(address(this));\n\n        // help tools like explorers detect the token contract\n        emit Transfer(address(0), address(0), 0);\n    }\n\n    function proxiableUUID() public pure override returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.contracts.SuperToken.implementation\");\n    }\n\n    function updateCode(address newAddress) external override {\n        if (msg.sender != address(_host)) revert SUPER_TOKEN_ONLY_HOST();\n        UUPSProxiable._updateCodeAddress(newAddress);\n    }\n\n    /**************************************************************************\n     * ERC20 Token Info\n     *************************************************************************/\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _STANDARD_DECIMALS;\n    }\n\n    /**************************************************************************\n     * (private) Token Logics\n     *************************************************************************/\n\n    /**\n     * @notice in the original openzeppelin implementation, transfer() and transferFrom()\n     * did invoke the send and receive hooks, as required by ERC777.\n     * This hooks were removed from super tokens for ERC20 transfers in order to protect\n     * interfacing contracts which don't expect invocations of ERC20 transfers to potentially reenter.\n     * Interactions relying on ERC777 hooks need to use the ERC777 interface.\n     * For more context, see https://github.com/superfluid-finance/protocol-monorepo/wiki/About-ERC-777\n     */\n    function _transferFrom(address spender, address holder, address recipient, uint amount)\n        internal returns (bool)\n    {\n        if (holder == address(0)) {\n            revert SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();\n        }\n        if (recipient == address(0)) {\n            revert SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();\n        }\n        address operator = msg.sender;\n\n        _move(operator, holder, recipient, amount, \"\", \"\");\n\n        if (spender != holder) {\n            _approve(\n                holder,\n                spender,\n                _allowances[holder][spender].sub(amount, \"SuperToken: transfer amount exceeds allowance\"));\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Send tokens\n     * @param operator address operator address\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        if (from == address(0)) {\n            revert SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();\n        }\n        if (to == address(0)) {\n            revert SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();\n        }\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        SuperfluidToken._move(from, to, amount.toInt256());\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bool requireReceptionAck,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        if (account == address(0)) {\n            revert SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();\n        }\n\n        SuperfluidToken._mint(account, amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param userData bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        if (from == address(0)) {\n            revert SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();\n        }\n\n        _callTokensToSend(operator, from, address(0), amount, userData, operatorData);\n\n        SuperfluidToken._burn(from, amount);\n\n        emit Burned(operator, from, amount, userData, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    /**\n     * @notice Sets `amount` as the allowance of `spender` over the `account`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address account, address spender, uint256 amount)\n        internal\n    {\n        if (account == address(0)) {\n            revert SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();\n        }\n        if (spender == address(0)) {\n            revert SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();\n        }\n\n        _allowances[account][spender] = amount;\n        emit Approval(account, spender, amount);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            from, ERC777Helper._TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            to, ERC777Helper._TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            if (to.isContract()) revert SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();\n        }\n    }\n\n    /**************************************************************************\n     * ERC20 Implementations\n     *************************************************************************/\n\n    function totalSupply()\n        public view override returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    )\n        public\n        view\n        override\n        returns(uint256 balance)\n    {\n        // solhint-disable-next-line not-rely-on-time\n        (int256 availableBalance, , ,) = super.realtimeBalanceOfNow(account);\n        return availableBalance < 0 ? 0 : uint256(availableBalance);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, msg.sender, recipient, amount);\n    }\n\n    function allowance(address account, address spender)\n        public view override returns (uint256)\n    {\n        return _allowances[account][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address holder, address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, holder, recipient, amount);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue,\n            \"SuperToken: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**************************************************************************\n     * ERC-777 functions\n     *************************************************************************/\n\n    function granularity() external pure override returns (uint256) { return 1; }\n\n    function send(address recipient, uint256 amount, bytes calldata data) external override {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n\n    function burn(uint256 amount, bytes calldata data) external override {\n        _downgrade(msg.sender, msg.sender, msg.sender, amount, data, \"\");\n    }\n\n    function isOperatorFor(address operator, address tokenHolder) external override view returns (bool) {\n        return _operators.isOperatorFor(operator, tokenHolder);\n    }\n\n    function authorizeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.authorizeOperator(holder, operator);\n        emit AuthorizedOperator(operator, holder);\n    }\n\n    function revokeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.revokeOperator(holder, operator);\n        emit RevokedOperator(operator, holder);\n    }\n\n    function defaultOperators() external override view returns (address[] memory) {\n        return ERC777Helper.defaultOperators(_operators);\n    }\n\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        if (!_operators.isOperatorFor(operator, sender)) revert SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();\n        _send(operator, sender, recipient, amount, data, operatorData, true);\n    }\n\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        if (!_operators.isOperatorFor(operator, account)) revert SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();\n        _downgrade(operator, account, account, amount, data, operatorData);\n    }\n\n    function _setupDefaultOperators(address[] memory operators) internal {\n        _operators.setupDefaultOperators(operators);\n    }\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    )\n        external override\n        onlySelf\n    {\n        _mint(msg.sender, account, amount,\n            false /* requireReceptionAck */, userData, new bytes(0));\n    }\n\n    function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n    )\n       external override\n       onlySelf\n    {\n       _burn(msg.sender, account, amount, userData, new bytes(0));\n    }\n\n    function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n    )\n        external override\n        onlySelf\n    {\n        _approve(account, spender, amount);\n    }\n\n    function selfTransferFrom(\n        address holder,\n        address spender,\n        address recipient,\n        uint256 amount\n    )\n        external override\n        onlySelf\n    {\n        _transferFrom(spender, holder, recipient, amount);\n    }\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    function transferAll(address recipient)\n        external override\n    {\n        _transferFrom(msg.sender, msg.sender, recipient, balanceOf(msg.sender));\n    }\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /// @dev ISuperfluidGovernance.getUnderlyingToken implementation\n    function getUnderlyingToken() external view override returns(address) {\n        return address(_underlyingToken);\n    }\n\n    /// @dev ISuperToken.upgrade implementation\n    function upgrade(uint256 amount) external override {\n        _upgrade(msg.sender, msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    /// @dev ISuperToken.upgradeTo implementation\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external override {\n        _upgrade(msg.sender, msg.sender, to, amount, data, \"\");\n    }\n\n    /// @dev ISuperToken.downgrade implementation\n    function downgrade(uint256 amount) external override {\n        _downgrade(msg.sender, msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    /// @inheritdoc ISuperToken\n    function downgradeTo(address to, uint256 amount) external override {\n        _downgrade(msg.sender, msg.sender, to, amount, \"\", \"\");\n    }\n\n    function _upgrade(\n        address operator,\n        address account,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        if (address(_underlyingToken) == address(0)) revert SUPER_TOKEN_NO_UNDERLYING_TOKEN();\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransferFrom(account, address(this), underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualUpgradedAmount = amountAfter - amountBefore;\n        if (underlyingAmount != actualUpgradedAmount) revert SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED();\n\n        _mint(operator, to, adjustedAmount,\n            // if `userData.length` than 0, we requireReceptionAck\n            userData.length != 0, userData, operatorData);\n\n        emit TokenUpgraded(to, adjustedAmount);\n    }\n\n    function _downgrade(\n        address operator, // the account executing the transaction\n        address account,  // the account whose super tokens we are burning\n        address to,       // the account receiving the underlying tokens\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData) private {\n        if (address(_underlyingToken) == address(0)) revert SUPER_TOKEN_NO_UNDERLYING_TOKEN();\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n         // _burn will check the (actual) amount availability again\n         _burn(operator, account, adjustedAmount, data, operatorData);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransfer(to, underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualDowngradedAmount = amountBefore - amountAfter;\n        if (underlyingAmount != actualDowngradedAmount) revert SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED();\n\n        emit TokenDowngraded(account, adjustedAmount);\n    }\n\n    /**\n     * @dev Handle decimal differences between underlying token and super token\n     */\n    function _toUnderlyingAmount(uint256 amount)\n        private view\n        returns (uint256 underlyingAmount, uint256 adjustedAmount)\n    {\n        uint256 factor;\n        if (_underlyingDecimals < _STANDARD_DECIMALS) {\n            // if underlying has less decimals\n            // one can upgrade less \"granualar\" amount of tokens\n            factor = 10 ** (_STANDARD_DECIMALS - _underlyingDecimals);\n            underlyingAmount = amount / factor;\n            // remove precision errors\n            adjustedAmount = underlyingAmount * factor;\n        } else if (_underlyingDecimals > _STANDARD_DECIMALS) {\n            // if underlying has more decimals\n            // one can upgrade more \"granualar\" amount of tokens\n            factor = 10 ** (_underlyingDecimals - _STANDARD_DECIMALS);\n            underlyingAmount = amount * factor;\n            adjustedAmount = amount;\n        } else {\n            underlyingAmount = adjustedAmount = amount;\n        }\n    }\n\n    /**************************************************************************\n     * Superfluid Batch Operations\n     *************************************************************************/\n\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _approve(account, spender, amount);\n    }\n\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _transferFrom(account, spender, recipient, amount);\n    }\n\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory userData\n    ) \n        external override\n        onlyHost\n    {\n        _send(msg.sender, spender, recipient, amount, userData, \"\", true);\n    }\n\n    function operationUpgrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _upgrade(msg.sender, account, account, amount, \"\", \"\");\n    }\n\n    function operationDowngrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _downgrade(msg.sender, account, account, amount, \"\", \"\");\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlySelf() {\n        if (msg.sender != address(this)) revert SUPER_TOKEN_ONLY_SELF();\n        _;\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\nimport { UUPSUtils } from \"./UUPSUtils.sol\";\nimport { Initializable } from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n/**\n * @title UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\n */\nabstract contract UUPSProxiable is Initializable {\n\n    /**\n     * @dev Get current implementation code address.\n     */\n    function getCodeAddress() public view returns (address codeAddress)\n    {\n        return UUPSUtils.implementation();\n    }\n\n    function updateCode(address newAddress) external virtual;\n\n    // allows to mark logic contracts as initialized in order to reduce the attack surface\n    // solhint-disable-next-line no-empty-blocks\n    function castrate() external initializer { }\n\n    /**\n     * @dev Proxiable UUID marker function, this would help to avoid wrong logic\n     *      contract to be used for upgrading.\n     *\n     * NOTE: The semantics of the UUID deviates from the actual UUPS standard,\n     *       where it is equivalent of _IMPLEMENTATION_SLOT.\n     */\n    function proxiableUUID() public view virtual returns (bytes32);\n\n    /**\n     * @dev Update code address function.\n     *      It is internal, so the derived contract could setup its own permission logic.\n     */\n    function _updateCodeAddress(address newAddress) internal\n    {\n        // require UUPSProxy.initializeProxy first\n        require(UUPSUtils.implementation() != address(0), \"UUPSProxiable: not upgradable\");\n        require(\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\n            \"UUPSProxiable: not compatible logic\"\n        );\n        require(\n            address(this) != newAddress,\n            \"UUPSProxiable: proxy loop\"\n        );\n        UUPSUtils.setImplementation(newAddress);\n        emit CodeUpdated(proxiableUUID(), newAddress);\n    }\n\n    event CodeUpdated(bytes32 uuid, address codeAddress);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.16;\n\n/**\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\n */\nlibrary UUPSUtils {\n\n    /**\n     * @dev Implementation slot constant.\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /// @dev Get implementation address.\n    function implementation() internal view returns (address impl) {\n        assembly { // solium-disable-line\n            impl := sload(_IMPLEMENTATION_SLOT)\n        }\n    }\n\n    /// @dev Set new implementation address.\n    function setImplementation(address codeAddress) internal {\n        assembly {\n            // solium-disable-line\n            sstore(\n                _IMPLEMENTATION_SLOT,\n                codeAddress\n            )\n        }\n    }\n\n}\n"
    },
    "contracts/Livy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {\n    ISuperfluid, \n    ISuperToken, \n    ISuperApp\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport { SuperTokenV1Library } from \"@superfluid-finance/ethereum-contracts/contracts/apps/SuperTokenV1Library.sol\";\n\ncontract Livy is ContextUpgradeable {\n\n    /// @notice CFA Library.\n    using SuperTokenV1Library for ISuperToken;\n\n    /// @notice Create flow from contract to specified address.\n    /// @param token Token to stream.\n    /// @param receiver Receiver of stream.\n    /// @param flowRate Flow rate per second to stream.\n    function createFlow(\n        ISuperToken token,\n        address receiver,\n        int96 flowRate\n    ) external {\n        token.createFlowFrom(_msgSender(), receiver, flowRate);\n    }\n}"
    },
    "contracts/SuperLivyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.16;\n\nimport { SuperToken } from \"@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperToken.sol\";\nimport { ISuperfluid, ISuperToken } from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport { SuperTokenV1Library } from \"@superfluid-finance/ethereum-contracts/contracts/apps/SuperTokenV1Library.sol\";\n\ncontract SuperLivyToken is SuperToken {\n    /// @notice CFA Library.\n    using SuperTokenV1Library for ISuperToken;\n\n    constructor (ISuperfluid _host) SuperToken(_host){}\n\n    function mint(uint256 amount) external {\n        _mint(msg.sender, msg.sender, amount, false /* requireReceptionAck */, new bytes(0), new bytes(0));\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}